// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: login.proto

package proto_login

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 登录类型
type LoginType int32

const (
	Guest LoginType = 0
)

var LoginType_name = map[int32]string{
	0: "Guest",
}

var LoginType_value = map[string]int32{
	"Guest": 0,
}

func (LoginType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{0}
}

type LoginResult int32

const (
	LoginSuccess                LoginResult = 0
	LoginFail                   LoginResult = 1
	LoginDBError                LoginResult = 2
	LoginCreateError            LoginResult = 3
	LoginReplaceError           LoginResult = 4
	LoginAccountOrPasswordError LoginResult = 5
)

var LoginResult_name = map[int32]string{
	0: "LoginSuccess",
	1: "LoginFail",
	2: "LoginDBError",
	3: "LoginCreateError",
	4: "LoginReplaceError",
	5: "LoginAccountOrPasswordError",
}

var LoginResult_value = map[string]int32{
	"LoginSuccess":                0,
	"LoginFail":                   1,
	"LoginDBError":                2,
	"LoginCreateError":            3,
	"LoginReplaceError":           4,
	"LoginAccountOrPasswordError": 5,
}

func (LoginResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{1}
}

type LoginRequest struct {
	LoginType  LoginType `protobuf:"varint,1,opt,name=LoginType,proto3,enum=proto.login.LoginType" json:"LoginType,omitempty"`
	LoginCode  string    `protobuf:"bytes,2,opt,name=LoginCode,proto3" json:"LoginCode,omitempty"`
	AppVersion string    `protobuf:"bytes,3,opt,name=AppVersion,proto3" json:"AppVersion,omitempty"`
	ResVersion string    `protobuf:"bytes,4,opt,name=ResVersion,proto3" json:"ResVersion,omitempty"`
	Os         string    `protobuf:"bytes,5,opt,name=Os,proto3" json:"Os,omitempty"`
	DeviceId   string    `protobuf:"bytes,6,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	Channel    int32     `protobuf:"varint,7,opt,name=Channel,proto3" json:"Channel,omitempty"`
	SdkInfo    *SdkInfo  `protobuf:"bytes,8,opt,name=SdkInfo,proto3" json:"SdkInfo,omitempty"`
	Account    string    `protobuf:"bytes,9,opt,name=Account,proto3" json:"Account,omitempty"`
	Password   string    `protobuf:"bytes,10,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *LoginRequest) Reset()      { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage() {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{0}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetLoginType() LoginType {
	if m != nil {
		return m.LoginType
	}
	return Guest
}

func (m *LoginRequest) GetLoginCode() string {
	if m != nil {
		return m.LoginCode
	}
	return ""
}

func (m *LoginRequest) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *LoginRequest) GetResVersion() string {
	if m != nil {
		return m.ResVersion
	}
	return ""
}

func (m *LoginRequest) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *LoginRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *LoginRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *LoginRequest) GetSdkInfo() *SdkInfo {
	if m != nil {
		return m.SdkInfo
	}
	return nil
}

func (m *LoginRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 渠道登录信息
type SdkInfo struct {
	AppId      int32  `protobuf:"varint,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	Uid        int32  `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	ChannelId  int32  `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Token      string `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
	PlatformId string `protobuf:"bytes,5,opt,name=PlatformId,proto3" json:"PlatformId,omitempty"`
}

func (m *SdkInfo) Reset()      { *m = SdkInfo{} }
func (*SdkInfo) ProtoMessage() {}
func (*SdkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{1}
}
func (m *SdkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SdkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SdkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SdkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdkInfo.Merge(m, src)
}
func (m *SdkInfo) XXX_Size() int {
	return m.Size()
}
func (m *SdkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SdkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SdkInfo proto.InternalMessageInfo

func (m *SdkInfo) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *SdkInfo) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SdkInfo) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *SdkInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SdkInfo) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

// 登录返回
type LoginResponse struct {
	Id     string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Result LoginResult `protobuf:"varint,2,opt,name=Result,proto3,enum=proto.login.LoginResult" json:"Result,omitempty"`
}

func (m *LoginResponse) Reset()      { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage() {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{2}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LoginResponse) GetResult() LoginResult {
	if m != nil {
		return m.Result
	}
	return LoginSuccess
}

type LoginKey struct {
	Key        string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	SessionId  string `protobuf:"bytes,2,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	ServerTime int64  `protobuf:"varint,3,opt,name=ServerTime,proto3" json:"ServerTime,omitempty"`
	ServerZone int32  `protobuf:"varint,4,opt,name=ServerZone,proto3" json:"ServerZone,omitempty"`
}

func (m *LoginKey) Reset()      { *m = LoginKey{} }
func (*LoginKey) ProtoMessage() {}
func (*LoginKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{3}
}
func (m *LoginKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginKey.Merge(m, src)
}
func (m *LoginKey) XXX_Size() int {
	return m.Size()
}
func (m *LoginKey) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginKey.DiscardUnknown(m)
}

var xxx_messageInfo_LoginKey proto.InternalMessageInfo

func (m *LoginKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LoginKey) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *LoginKey) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *LoginKey) GetServerZone() int32 {
	if m != nil {
		return m.ServerZone
	}
	return 0
}

type Ping struct {
	Time int64 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *Ping) Reset()      { *m = Ping{} }
func (*Ping) ProtoMessage() {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{4}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Pong struct {
	LastTime int64 `protobuf:"varint,1,opt,name=LastTime,proto3" json:"LastTime,omitempty"`
	Time     int64 `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *Pong) Reset()      { *m = Pong{} }
func (*Pong) ProtoMessage() {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{5}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return m.Size()
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetLastTime() int64 {
	if m != nil {
		return m.LastTime
	}
	return 0
}

func (m *Pong) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Logout struct {
}

func (m *Logout) Reset()      { *m = Logout{} }
func (*Logout) ProtoMessage() {}
func (*Logout) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{6}
}
func (m *Logout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Logout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Logout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Logout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logout.Merge(m, src)
}
func (m *Logout) XXX_Size() int {
	return m.Size()
}
func (m *Logout) XXX_DiscardUnknown() {
	xxx_messageInfo_Logout.DiscardUnknown(m)
}

var xxx_messageInfo_Logout proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("proto.login.LoginType", LoginType_name, LoginType_value)
	proto.RegisterEnum("proto.login.LoginResult", LoginResult_name, LoginResult_value)
	proto.RegisterType((*LoginRequest)(nil), "proto.login.LoginRequest")
	proto.RegisterType((*SdkInfo)(nil), "proto.login.SdkInfo")
	proto.RegisterType((*LoginResponse)(nil), "proto.login.LoginResponse")
	proto.RegisterType((*LoginKey)(nil), "proto.login.LoginKey")
	proto.RegisterType((*Ping)(nil), "proto.login.Ping")
	proto.RegisterType((*Pong)(nil), "proto.login.Pong")
	proto.RegisterType((*Logout)(nil), "proto.login.Logout")
}

func init() { proto.RegisterFile("login.proto", fileDescriptor_67c21677aa7f4e4f) }

var fileDescriptor_67c21677aa7f4e4f = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xf5, 0x3a, 0x71, 0x9a, 0x4c, 0x7e, 0xad, 0xfc, 0x5b, 0x95, 0xca, 0x2a, 0x68, 0x89, 0x7c,
	0x8a, 0x7a, 0x88, 0x50, 0xa9, 0xb8, 0xf7, 0x0f, 0x20, 0xab, 0x95, 0x1a, 0x36, 0x81, 0x03, 0x37,
	0x63, 0x6f, 0x83, 0x55, 0xd7, 0x6b, 0xbc, 0x4e, 0x51, 0x38, 0x71, 0xe1, 0x8a, 0xf8, 0x18, 0x7c,
	0x14, 0x4e, 0x28, 0xc7, 0x1e, 0x89, 0x73, 0xe1, 0xd8, 0x8f, 0x80, 0x76, 0xbd, 0x76, 0x8c, 0x38,
	0x79, 0xdf, 0x7b, 0x33, 0xb3, 0x3b, 0x6f, 0xc6, 0xd0, 0x8f, 0xf9, 0x2c, 0x4a, 0x46, 0x69, 0xc6,
	0x73, 0x8e, 0xfb, 0xea, 0x33, 0x52, 0x94, 0xfb, 0xd3, 0x84, 0xff, 0x2e, 0xe4, 0x89, 0xb2, 0x0f,
	0x73, 0x26, 0x72, 0x7c, 0x04, 0x3d, 0x85, 0xa7, 0x8b, 0x94, 0x39, 0x68, 0x80, 0x86, 0x3b, 0x87,
	0x7b, 0xa3, 0x46, 0xc6, 0xa8, 0x56, 0xe9, 0x26, 0x10, 0x3f, 0xd2, 0x59, 0xa7, 0x3c, 0x64, 0x8e,
	0x39, 0x40, 0xc3, 0x1e, 0xdd, 0x10, 0x98, 0x00, 0x1c, 0xa7, 0xe9, 0x1b, 0x96, 0x89, 0x88, 0x27,
	0x4e, 0x4b, 0xc9, 0x0d, 0x46, 0xea, 0x94, 0x89, 0x4a, 0x6f, 0x97, 0xfa, 0x86, 0xc1, 0x3b, 0x60,
	0x5e, 0x0a, 0xc7, 0x52, 0xbc, 0x79, 0x29, 0xf0, 0x3e, 0x74, 0xcf, 0xd8, 0x6d, 0x14, 0x30, 0x2f,
	0x74, 0x3a, 0x8a, 0xad, 0x31, 0x76, 0x60, 0xeb, 0xf4, 0xbd, 0x9f, 0x24, 0x2c, 0x76, 0xb6, 0x06,
	0x68, 0x68, 0xd1, 0x0a, 0xe2, 0x11, 0x6c, 0x4d, 0xc2, 0x6b, 0x2f, 0xb9, 0xe2, 0x4e, 0x77, 0x80,
	0x86, 0xfd, 0xc3, 0xdd, 0xbf, 0xfa, 0xd2, 0x1a, 0xad, 0x82, 0x64, 0xa5, 0xe3, 0x20, 0xe0, 0xf3,
	0x24, 0x77, 0x7a, 0xea, 0x92, 0x0a, 0xca, 0xfb, 0xc7, 0xbe, 0x10, 0x1f, 0x79, 0x16, 0x3a, 0x50,
	0xde, 0x5f, 0x61, 0xf7, 0x0b, 0xaa, 0xaf, 0xc1, 0xbb, 0x60, 0x1d, 0xa7, 0xa9, 0x17, 0x2a, 0x1f,
	0x2d, 0x5a, 0x02, 0x6c, 0x43, 0xeb, 0x75, 0x14, 0x2a, 0x97, 0x2c, 0x2a, 0x8f, 0xd2, 0x3d, 0xfd,
	0x48, 0x2f, 0x54, 0xf6, 0x58, 0x74, 0x43, 0xc8, 0x2a, 0x53, 0x7e, 0xcd, 0x2a, 0x63, 0x4a, 0x20,
	0x3d, 0x1b, 0xc7, 0x7e, 0x7e, 0xc5, 0xb3, 0x1b, 0x2f, 0xd4, 0xde, 0x34, 0x18, 0xf7, 0x15, 0x6c,
	0xeb, 0xb9, 0x8a, 0x94, 0x27, 0x82, 0x49, 0x13, 0xf5, 0x4b, 0x7a, 0xd4, 0xf4, 0x42, 0xfc, 0x04,
	0x3a, 0x94, 0x89, 0x79, 0x9c, 0xab, 0x97, 0xec, 0x1c, 0x3a, 0xff, 0x4e, 0xb9, 0xd4, 0xa9, 0x8e,
	0x73, 0x3f, 0x41, 0x57, 0xd1, 0xe7, 0x6c, 0x21, 0x9b, 0x38, 0x67, 0x0b, 0x5d, 0x4e, 0x1e, 0x65,
	0x13, 0x13, 0x26, 0xe4, 0xbc, 0xbc, 0xb0, 0x5a, 0x81, 0x9a, 0x90, 0xcf, 0x9d, 0xb0, 0xec, 0x96,
	0x65, 0xd3, 0xe8, 0x86, 0xa9, 0x1e, 0x5b, 0xb4, 0xc1, 0x6c, 0xf4, 0xb7, 0x3c, 0x61, 0xaa, 0x53,
	0x8b, 0x36, 0x18, 0x77, 0x1f, 0xda, 0xe3, 0x28, 0x99, 0x61, 0x0c, 0x6d, 0x55, 0x01, 0xa9, 0x0a,
	0xea, 0xec, 0x3e, 0x83, 0xf6, 0x98, 0x27, 0x33, 0x39, 0x96, 0x0b, 0x5f, 0xe4, 0x0d, 0xbd, 0xc6,
	0x75, 0x9e, 0xd9, 0xc8, 0xeb, 0x42, 0xe7, 0x82, 0xcf, 0xf8, 0x3c, 0x3f, 0xd8, 0x6b, 0x2c, 0x3d,
	0xee, 0x81, 0xf5, 0x52, 0xfe, 0x0a, 0xb6, 0x71, 0xf0, 0x15, 0x41, 0xbf, 0xe1, 0x04, 0xb6, 0xf5,
	0xcf, 0x32, 0x99, 0x07, 0x01, 0x13, 0xc2, 0x36, 0xf0, 0xb6, 0xce, 0x7c, 0xe1, 0x47, 0xb1, 0x8d,
	0xea, 0x80, 0xb3, 0x93, 0xe7, 0x59, 0xc6, 0x33, 0xdb, 0xc4, 0xbb, 0x60, 0x97, 0x3f, 0x42, 0xc6,
	0xfc, 0x9c, 0x95, 0x6c, 0x0b, 0x3f, 0x80, 0xff, 0x75, 0xdd, 0x34, 0xf6, 0x03, 0x4d, 0xb7, 0xf1,
	0x63, 0x78, 0xa8, 0x68, 0xbd, 0x68, 0x97, 0x59, 0xb5, 0x56, 0x65, 0x80, 0x75, 0x72, 0xb4, 0x5c,
	0x11, 0xe3, 0x6e, 0x45, 0x8c, 0xfb, 0x15, 0x41, 0x9f, 0x0b, 0x82, 0xbe, 0x17, 0x04, 0xfd, 0x28,
	0x08, 0x5a, 0x16, 0x04, 0xfd, 0x2a, 0x08, 0xfa, 0x5d, 0x10, 0xe3, 0xbe, 0x20, 0xe8, 0xdb, 0x9a,
	0x18, 0xcb, 0x35, 0x31, 0xee, 0xd6, 0xc4, 0x78, 0xd7, 0x51, 0x93, 0x7d, 0xfa, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x89, 0xc1, 0xef, 0x9d, 0x07, 0x04, 0x00, 0x00,
}

func (x LoginType) String() string {
	s, ok := LoginType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LoginResult) String() string {
	s, ok := LoginResult_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if this.LoginCode != that1.LoginCode {
		return false
	}
	if this.AppVersion != that1.AppVersion {
		return false
	}
	if this.ResVersion != that1.ResVersion {
		return false
	}
	if this.Os != that1.Os {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if !this.SdkInfo.Equal(that1.SdkInfo) {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *SdkInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SdkInfo)
	if !ok {
		that2, ok := that.(SdkInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.ChannelId != that1.ChannelId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.PlatformId != that1.PlatformId {
		return false
	}
	return true
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *LoginKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginKey)
	if !ok {
		that2, ok := that.(LoginKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.ServerZone != that1.ServerZone {
		return false
	}
	return true
}
func (this *Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ping)
	if !ok {
		that2, ok := that.(Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *Pong) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pong)
	if !ok {
		that2, ok := that.(Pong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LastTime != that1.LastTime {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *Logout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Logout)
	if !ok {
		that2, ok := that.(Logout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&proto_login.LoginRequest{")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	s = append(s, "LoginCode: "+fmt.Sprintf("%#v", this.LoginCode)+",\n")
	s = append(s, "AppVersion: "+fmt.Sprintf("%#v", this.AppVersion)+",\n")
	s = append(s, "ResVersion: "+fmt.Sprintf("%#v", this.ResVersion)+",\n")
	s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	if this.SdkInfo != nil {
		s = append(s, "SdkInfo: "+fmt.Sprintf("%#v", this.SdkInfo)+",\n")
	}
	s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SdkInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto_login.SdkInfo{")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "PlatformId: "+fmt.Sprintf("%#v", this.PlatformId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto_login.LoginResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto_login.LoginKey{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "ServerTime: "+fmt.Sprintf("%#v", this.ServerTime)+",\n")
	s = append(s, "ServerZone: "+fmt.Sprintf("%#v", this.ServerZone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto_login.Ping{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto_login.Pong{")
	s = append(s, "LastTime: "+fmt.Sprintf("%#v", this.LastTime)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Logout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto_login.Logout{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SdkInfo != nil {
		{
			size, err := m.SdkInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Channel != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Os) > 0 {
		i -= len(m.Os)
		copy(dAtA[i:], m.Os)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Os)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResVersion) > 0 {
		i -= len(m.ResVersion)
		copy(dAtA[i:], m.ResVersion)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.ResVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LoginCode) > 0 {
		i -= len(m.LoginCode)
		copy(dAtA[i:], m.LoginCode)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.LoginCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.LoginType != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.LoginType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SdkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SdkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SdkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlatformId) > 0 {
		i -= len(m.PlatformId)
		copy(dAtA[i:], m.PlatformId)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.PlatformId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChannelId != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerZone != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.ServerZone))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerTime != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.LastTime != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.LastTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Logout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Logout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginType != 0 {
		n += 1 + sovLogin(uint64(m.LoginType))
	}
	l = len(m.LoginCode)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.ResVersion)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Channel != 0 {
		n += 1 + sovLogin(uint64(m.Channel))
	}
	if m.SdkInfo != nil {
		l = m.SdkInfo.Size()
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *SdkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLogin(uint64(m.AppId))
	}
	if m.Uid != 0 {
		n += 1 + sovLogin(uint64(m.Uid))
	}
	if m.ChannelId != 0 {
		n += 1 + sovLogin(uint64(m.ChannelId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.PlatformId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovLogin(uint64(m.Result))
	}
	return n
}

func (m *LoginKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 1 + sovLogin(uint64(m.ServerTime))
	}
	if m.ServerZone != 0 {
		n += 1 + sovLogin(uint64(m.ServerZone))
	}
	return n
}

func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovLogin(uint64(m.Time))
	}
	return n
}

func (m *Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastTime != 0 {
		n += 1 + sovLogin(uint64(m.LastTime))
	}
	if m.Time != 0 {
		n += 1 + sovLogin(uint64(m.Time))
	}
	return n
}

func (m *Logout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovLogin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`LoginCode:` + fmt.Sprintf("%v", this.LoginCode) + `,`,
		`AppVersion:` + fmt.Sprintf("%v", this.AppVersion) + `,`,
		`ResVersion:` + fmt.Sprintf("%v", this.ResVersion) + `,`,
		`Os:` + fmt.Sprintf("%v", this.Os) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`SdkInfo:` + strings.Replace(this.SdkInfo.String(), "SdkInfo", "SdkInfo", 1) + `,`,
		`Account:` + fmt.Sprintf("%v", this.Account) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SdkInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SdkInfo{`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`ChannelId:` + fmt.Sprintf("%v", this.ChannelId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`PlatformId:` + fmt.Sprintf("%v", this.PlatformId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginKey{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`ServerTime:` + fmt.Sprintf("%v", this.ServerTime) + `,`,
		`ServerZone:` + fmt.Sprintf("%v", this.ServerZone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ping{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pong{`,
		`LastTime:` + fmt.Sprintf("%v", this.LastTime) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Logout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Logout{`,
		`}`,
	}, "")
	return s
}
func valueToStringLogin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= LoginType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SdkInfo == nil {
				m.SdkInfo = &SdkInfo{}
			}
			if err := m.SdkInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SdkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SdkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SdkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= LoginResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerZone", wireType)
			}
			m.ServerZone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerZone |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			m.LastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogin = fmt.Errorf("proto: unexpected end of group")
)
